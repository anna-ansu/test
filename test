include:
  - component: путь/test-phpunit
  - component: путь/build-node11
  - component: путь/build-php


stages:
  - test
  - build
  - deploy

phpunit:
  stage: test
  #script: echo 'Тест'


build-js:
  image: путь/node:18


build-php:
  stage: build
  image: путь/php:8-4
  script: echo "Build"

deploy:
  stage: deploy
  script: echo "deploy"


- php vendor/bin/phpunit --colors=never --testsuite "Unit" --no-interaction --log-junit report.xml -d display_errors=on -d date.timezone="Etc/GMT-3"
docker compose --env-file .env.local -f docker-compose.yml -f docker-compose.override.yml up -d

static::getContainer()->get('mock_client')->setResponseFactory(
            [
                new MockResponse(
                    file_get_contents(
                       file
                    )
                )
            ]
        );


        $bus = static::getContainer()->get('messenger.bus.default');
        $envelope = $bus->dispatch(
            new NameMessage('...')
        );
      
        static::assertNotEmpty($handledStamp = $envelope->last(HandledStamp::class));
        static::assertInstanceOf(HandledStamp::class, $handledStamp);
        $data = $handledStamp->getResult();
        static::assertEquals(          
            [ ... ],
            $data
        );



@startuml
actor User as user
participant "API Gateway" as api
participant "Handler" as handler
database "FedR DB" as fedr
database "Core DB" as core

== Поиск по ФИО ==

user -> api: Запрос поиска (ФИО)
api -> handler: ProcessSearchMessage(ФИО)
activate handler

handler -> core: Запрос по ФИО
core --> handler: Данные клиента (Core)
handler -> fedr: Поиск по ФИО
fedr --> handler: Данные клиента (FedR)

alt Клиент найден в обеих БД
    handler -> fedr: Обновить данные\nиз Core
    fedr --> handler: Подтверждение
else Клиент только в Core
    handler -> fedr: Добавить нового клиента
    fedr --> handler: ID нового клиента
end

handler -> api: Результат обработки
deactivate handler
api -> user: Ответ (обновленные/новые данные)

== Поиск по ID ==

user -> api: Запрос поиска (ID)
api -> handler: ProcessSearchMessage(ID)
activate handler

handler -> core: Запрос по ID
core --> handler: Данные клиента (Core)
handler -> fedr: Поиск по ID
fedr --> handler: Данные клиента (FedR)

alt Клиент найден в обеих БД
    handler -> fedr: Обновить данные\nиз Core
    fedr --> handler: Подтверждение
else Клиент только в Core
    handler -> fedr: Добавить нового клиента
    fedr --> handler: ID нового клиента
end

handler -> api: Результат обработки
deactivate handler
api -> user: Ответ (обновленные/новые данные)

@enduml


@startuml
participant "Message Bus" as bus
participant "Handler" as handler
database "FedR DB" as fedr
database "Core DB" as core
participant "Event Dispatcher" as dispatcher

== Обработка сообщения ==

bus -> handler: ProcessSearchMessage(ФИО/ID)
activate handler

handler -> core: Запрос клиента
core --> handler: Данные клиента

handler -> fedr: Поиск клиента
fedr --> handler: Результат

alt Клиент существует в FedR
    handler -> fedr: Обновить данные
    fedr --> handler: OK
    handler -> dispatcher: ClientUpdatedEvent
else Клиент не найден
    handler -> fedr: Создать клиента
    fedr --> handler: Новый ID
    handler -> dispatcher: ClientCreatedEvent
end

deactivate handler

== Обработка событий ==

dispatcher -> bus: NewEventMessage()
@enduml
