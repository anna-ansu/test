–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å üëå –î–∞–≤–∞–π —è –æ–±—ä—è—Å–Ω—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –∞ –ø–æ—Ç–æ–º —á—É—Ç—å –≥–ª—É–±–∂–µ.


---

üîπ –ß—Ç–æ —Ç–∞–∫–æ–µ Pipeline

Pipeline (–∫–æ–Ω–≤–µ–π–µ—Ä) –≤ GitLab ‚Äî —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —à–∞–≥–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.

–ü—Ä–∏–º–µ—Ä –∏–∑ –∂–∏–∑–Ω–∏:
—Ç—ã –ø–∏—à–µ—à—å –∫–æ–¥ ‚Üí –ø—É—à–∏—à—å –µ–≥–æ –≤ GitLab ‚Üí GitLab —Å–∞–º:

1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç (—Ç–µ—Å—Ç—ã)


2. –°–æ–±–∏—Ä–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ


3. –£–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä


4. –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç (–¥–µ–ø–ª–æ–π) –Ω–∞ —Å–µ—Ä–≤–µ—Ä



–¢–æ –µ—Å—Ç—å pipeline = —Ü–µ–ø–æ—á–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏: test ‚Üí build ‚Üí deploy.


---

üîπ –û—Å–Ω–æ–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã

1. Stages (—Å—Ç–∞–¥–∏–∏)
–õ–æ–≥–∏—á–µ—Å–∫–∏–µ —ç—Ç–∞–ø—ã –ø–∞–π–ø–ª–∞–π–Ω–∞, –∏–¥—É—Ç –ø–æ –ø–æ—Ä—è–¥–∫—É:

stages:
  - test
  - build
  - deploy

‚Üí —Å–Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç—ã, –ø–æ—Ç–æ–º —Å–±–æ—Ä–∫–∞, –ø–æ—Ç–æ–º –¥–µ–ø–ª–æ–π.




---

2. Jobs (–¥–∂–æ–±—ã)
–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –≤–Ω—É—Ç—Ä–∏ —Å—Ç–∞–¥–∏–π.
–ü—Ä–∏–º–µ—Ä:

phpunit:
  stage: test
  script:
    - vendor/bin/phpunit




---

3. Runners
–≠—Ç–æ ¬´–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏¬ª, –∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∞–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è—é—Ç –∫–æ–º–∞–Ω–¥—ã.

Runner –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞ —Ç–æ–º –∂–µ —Å–µ—Ä–≤–µ—Ä–µ, –≥–¥–µ GitLab.

Runner –∑–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã (docker compose up, npm run build, –∏ —Ç.–ø.).





---

4. Workflow –∏ Rules

workflow ‚Äî –æ–±—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞, –∑–∞–ø—É—Å–∫–∞—Ç—å –ª–∏ –ø–∞–π–ø–ª–∞–π–Ω.

rules ‚Äî —É—Å–ª–æ–≤–∏—è, –∑–∞–ø—É—Å–∫–∞—Ç—å –ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π job.
–ü—Ä–∏–º–µ—Ä: –¥–µ–ø–ª–æ–π —Ç–æ–ª—å–∫–æ –∏–∑ master:


deploy:
  stage: deploy
  script:
    - docker compose up -d
  rules:
    - if: $CI_COMMIT_BRANCH == "master"




---

5. Environment (–æ–∫—Ä—É–∂–µ–Ω–∏–µ)

GitLab –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫—É–¥–∞ –≤—ã–∫–∞—Ç–∏–ª–æ—Å—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (staging, prod).

–ú–æ–∂–Ω–æ –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ URL –∏ –æ—Ç–∫—Ä—ã—Ç—å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
–ü—Ä–∏–º–µ—Ä:


environment:
  name: staging
  url: http://staging.myapp.com




---

üîπ –ö–∞–∫ –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ —à–∞–≥–∞–º

1. –¢—ã –ø—É—à–∏—à—å –∫–æ–¥ –≤ GitLab.


2. GitLab —Å–º–æ—Ç—Ä–∏—Ç .gitlab-ci.yml.


3. –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è pipeline ‚Äî —Ü–µ–ø–æ—á–∫–∞ —Å—Ç–∞–¥–∏–π (test ‚Üí build ‚Üí deploy).


4. GitLab Runner –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã.


5. –í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ:

–ü—Ä–æ–≤–µ—Ä–µ–Ω –∫–æ–¥ (—Ç–µ—Å—Ç—ã).

–°–æ–±—Ä–∞–Ω –æ–±—Ä–∞–∑ / –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã.

–†–∞–∑–≤—ë—Ä–Ω—É—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–¥–µ–ø–ª–æ–π).



6. –í GitLab –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å: –∫–∞–∫–æ–π –∫–æ–º–º–∏—Ç –∑–∞–¥–µ–ø–ª–æ–µ–Ω, –≥–¥–µ –∏ –∫–æ–≥–¥–∞.




---

üîπ –°—Ö–µ–º–∞

Git push ‚Üí GitLab ‚Üí Pipeline
             ‚Üì
          Stages:
  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
  ‚îÇ test ‚îÇ build  ‚îÇ deploy   ‚îÇ
  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
             ‚Üì
         Runner –≤—ã–ø–æ–ª–Ω—è–µ—Ç
             ‚Üì
      –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç


deploy:
    stage: deploy
    script:
        - docker compose pull
        - docker compose up -d
    environment:
      name: test      
      url: ...
    rules:
      - if: $CI_COMMIT_BRANCH == "main"

version: "3.9"

services:
  app:
    image: registry.gitlab.com/group/project/myapp:latest
    container_name: myapp
    restart: always
    environment:
      APP_ENV: test
      APP_DEBUG: 1
    ports:
      - "8080:80"   # –ø—Ä–æ–±—Ä–æ—Å –Ω–∞—Ä—É–∂—É
    depends_on:
      - db

  db:
    image: postgres:15
    restart: always
    environment:
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypass
      POSTGRES_DB: mydb
    volumes:
      - db_data:/var/lib/postgresql/data

volumes:
  db_data:
