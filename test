да$s = array_filter(
$data['i'] ?? [],
fn(array $identity) => $identity['ip'] === 'IC',
);

$s1 = array_shift($s)
$s1 = preg_replace('/\D/', '', $s1[n'])


try {
  $response = $this->handle(...);

  if(empty($response)) {
    return null;
  }

  $c - достаем клиента из внешней базы по $message->getId()
  if(null === $c) {
    $c = new Client ($message->getId());
  }

$c->set...
пречисляем параметры

return $person;

} catch (Throwable $e){
  $this->logger->error($e->getMassage())
  return null;
}



$message = new NameMessage('...');
$handler = static::getContainer()->get(NameHandler::class);
$data = $handler->__invoke($message);


static::getContainer()->get('mock_client')_>setResponceFactory(new MockResponse ( вдругих примерах тут xml))


  $a = $c->getA()->findFirst(
      fn(int $index, Account $a) => $a->getId() === $raw['id']
  );




  +query: Symfony\Component\HttpFoundation\InputBag^ {#3080
    #parameters: array:3 [
      "utm_source" => ".."
      "cnv_id" => ".."
      "cardid" => "111"
    ]
  }




@startuml CustomerHandlers

' Сущность Клиент
class Customer {
  +id: int
  +name: string
  +email: string
  +createdAt: DateTime
  --
  +getId(): int
  +getName(): string
  +setName(name: string): void
  +getEmail(): string
  +setEmail(email: string): void
}

' Репозиторий для работы с БД
class CustomerRepository {
  +findAll(): array<Customer>
  +findBy(criteria: array): array<Customer>
  +find(id: int): Customer|null
  +save(customer: Customer): void
  +update(customer: Customer): void
}

' Обработчик поиска клиентов
class CustomerSearchHandler {
  -repository: CustomerRepository
  --
  +__construct(repository: CustomerRepository)
  +searchByName(name: string): array<Customer>
  +searchByEmail(email: string): array<Customer>
}

' Обработчик обновления клиента
class CustomerUpdateHandler {
  -repository: CustomerRepository
  -validator: ValidatorInterface
  --
  +__construct(repository: CustomerRepository, validator: ValidatorInterface)
  +updateCustomer(id: int, data: array): Customer
  +validateCustomer(customer: Customer): void
}

' Валидатор (интерфейс Symfony)
interface ValidatorInterface {
  +validate(value: object, constraints: null|Constraint|array): ConstraintViolationListInterface
}

' Связи между классами
CustomerRepository "1" --> "*" Customer : содержит
CustomerSearchHandler --> CustomerRepository : использует
CustomerUpdateHandler --> CustomerRepository : использует
CustomerUpdateHandler --> ValidatorInterface : использует

@enduml
